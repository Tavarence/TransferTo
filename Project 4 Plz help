public class InvalidMazeException extends Exception {
    public InvalidMazeException() {
        super();
    }
    
    public InvalidMazeException(String message) {
        super(message);
    }
}

----------------

public class Maze {
    private final int[] end; //Field for the end square of this Maze.
    private final char[][] grid; //Field for the char grid representation of this Maze.
    private final String name; //Field for the Maze's name
    private int[][] path; //Field for the array of moves required to solve this Maze.
    private final int[] start; //Field for the start square of this Maze.
    
    public Maze(String name, char[][] grid, int[] start, int[] end) {
        this.name = name;
        this.grid = grid;
        this.start = start;
        this.end = end;
        this.path = null;
    }
    
    public int[] getEnd() {
        return end;
    }
    
    public char[][] getGrid() {
        return grid;
    }
    
    public String getName() {
        return name;
    }
    
    public int[] getStart() {
        return end;
    }
    
    public String pathString() {
        String currentPath = "";
        for (int pathway[]:path) {
            currentPath += pathway[0] + "-" + pathway[1] + "\n";
        }
        return String.format("%s\nMoves: %d\n%s", name, path.length, currentPath);
        //This method returns the String representing the Maze solution.
        //The first line should be the Maze name.
        //The second line should be "Moves: " followed by the number of moves.
    }
    
    public void setPath(int[][] path) {
        if (path[0][0] == start[0] && path[0][1] == start[1] && path[path.length][0] == end[0] && path[path.length][1] == end[1] && path.length == this.path.length) {
            this.path = path;
        }
        //Sets the path of this Maze to the given path.
        //The array should contain moves in order for example the first move would be the start square.
        //If start were 6-0 then path[0][0] = row = 6 and path[0][1] = column = 0.
        //The second move would then be stored in path[1][0] = row and path[1][1] = column
        //The length of path should be equal to the number of moves required to exit the maze.
        //The start and end squares should always be the first and last moves in this array.
    }
    
    public String toString() {
        
        String currentMaze = "";
        for (char[] tiles: grid) {
            for (char tile: tiles) {
                currentMaze += tile;
            }
            currentMaze += "\n";
        }
        return String.format("%s\nStart: %d-%d\nEnd: %d-%d\n%s", name, start[0], start[1], end[0], end[1], currentMaze);
        //Returns the String representation of this Maze.
        //The format is the same as the input file format.
        //The first line is the name of the maze.
        //The second line is "Start: " followed by the row-col of the start square.
    }
}

-------------

import java.io.*;
import java.util.*;

/**
 * Project 4 -- Maze Solver
 *
 * This program runs through a maze made of a 2D array.
 *
 * @author Luke Troutman, CS 180 week 11
 *
 * @version Nov 24, 2024
 *
 */

public class MazeSolver {
    private Maze maze;

    public MazeSolver() {
        maze = null;
    }

    public void readMaze(String filename) {
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            ArrayList<String> data = new ArrayList<>();
            String line;
            while ((line = br.readLine()) != null) {
                data.add(line);
            }
            int[] start = {Integer.parseInt(data.get(2).split(": ")[1].split("-")[0]),
                    Integer.parseInt(data.get(2).split(": ")[1].split("-")[1])};
            int[] end = {Integer.parseInt(data.get(3).split(": ")[1].split("-")[0]),
                    Integer.parseInt(data.get(3).split(": ")[1].split("-")[1])};
            char[][] grid = new char[data.size() - 3][data.get(4).length()];

            for (int i = 0; i < grid.length; i++) {
                for (int g = 0; g < grid[i].length; g++) {
                    if (data.get(4 + i).toCharArray()[g] != 'P' || data.get(4 + i).toCharArray()[g] != 'W') {
                        throw new InvalidMazeException();
                    }
                    grid[i][g] = data.get(4 + i).toCharArray()[g];
                }
                if (i != 0) {
                    if (grid[i].length != grid[i - 1].length) {
                        throw new InvalidMazeException();
                    }
                }
            }

            if (start[0] > grid.length || start[1] < grid.length
                    || end[0] > grid.length || end[1] < grid.length
                    || grid[start[0]][start[1]] != 'P'
                    || grid[end[0]][end[1]] != 'P') {
                throw new InvalidMazeException();
            }
            maze = new Maze(data.get(0), grid, start, end);
        } catch (InvalidMazeException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void solveMaze() {
        String[] shortestPath = new String[0];
        ArrayList<String> currentPath = new ArrayList<>();
        ArrayList<String> oldLocation = new ArrayList<>();

        moveMaker(maze.getStart(), oldLocation, shortestPath, currentPath);

        int[][] path = new int[shortestPath.length][2];
        for (int i = 0; i < shortestPath.length; i++) {
            for (int g = 0; g < 2; g++) {
                path[i][g] = Integer.parseInt(shortestPath[i].split(", ")[g].replace("[", "").replace("]", ""));
            }
        }
        maze.setPath(path);
    }

    private String[] moveMaker(int[] current, ArrayList<String> oldLocation, String[] shortestPath, ArrayList<String> currentPath) {
        int[] currentLocation = current;
        try {
            while (true) {
                if (maze.getGrid()[current[0] + 1][current[1]] == 'P'
                        && !dejavu((current[0] + 1) + ", " + current[1], oldLocation)) {
                    currentLocation[0] = current[0] + 1;
                    currentLocation[1] = current[1];
                    currentPath.add(Arrays.toString(currentLocation));
                    oldLocation.add(Arrays.toString(currentLocation));
                    if (currentLocation == maze.getEnd() && (shortestPath.length > currentPath.size() || shortestPath.length == 0)) {
                        shortestPath = currentPath.toArray(new String[currentPath.size()]);
                        currentPath.remove(currentPath.size() - 1);
                        oldLocation.remove(oldLocation.size() - 1);
                    } else if (shortestPath.length < currentPath.size() && shortestPath.length != 0) {
                        oldLocation.remove(oldLocation.size() - 1);
                        currentLocation[0] = Integer.parseInt(oldLocation.get(oldLocation.size() - 1).split(", ")[0].replace("[", ""));
                        currentLocation[1] = Integer.parseInt(oldLocation.get(oldLocation.size() - 1).split(", ")[1].replace("]", ""));
                    } else {
                        moveMaker(currentLocation, oldLocation, shortestPath, currentPath);
                    }
                }
                if (maze.getGrid()[current[0] - 1][current[1]] == 'P'
                        && !dejavu((current[0] - 1) + ", " + current[1], oldLocation)) {
                    currentLocation[0] = current[0] - 1;
                    currentLocation[1] = current[1];
                    currentPath.add(Arrays.toString(currentLocation));
                    oldLocation.add(Arrays.toString(currentLocation));
                    if (currentLocation == maze.getEnd() && (shortestPath.length > currentPath.size() || shortestPath.length == 0)) {
                        shortestPath = currentPath.toArray(new String[currentPath.size()]);
                        currentPath.remove(currentPath.size() - 1);
                        oldLocation.remove(oldLocation.size() - 1);
                    } else if (shortestPath.length < currentPath.size() && shortestPath.length != 0) {
                        oldLocation.remove(oldLocation.size() - 1);
                        currentLocation[0] = Integer.parseInt(oldLocation.get(oldLocation.size() - 1).split(", ")[0].replace("[", ""));
                        currentLocation[1] = Integer.parseInt(oldLocation.get(oldLocation.size() - 1).split(", ")[1].replace("]", ""));
                    } else {
                        moveMaker(currentLocation, oldLocation, shortestPath, currentPath);
                    }
                }
                if (maze.getGrid()[current[0]][current[1] + 1] == 'P'
                        && !dejavu(current[0] + ", " + (current[1] + 1), oldLocation)) {
                    currentLocation[0] = current[0];
                    currentLocation[1] = current[1] + 1;
                    currentPath.add(Arrays.toString(currentLocation));
                    oldLocation.add(Arrays.toString(currentLocation));
                    if (currentLocation == maze.getEnd() && (shortestPath.length > currentPath.size() || shortestPath.length == 0)) {
                        currentPath.remove(currentPath.size() - 1);
                        shortestPath = currentPath.toArray(new String[currentPath.size()]);
                        oldLocation.remove(oldLocation.size() - 1);
                    } else if (shortestPath.length < currentPath.size() && shortestPath.length != 0) {
                        oldLocation.remove(oldLocation.size() - 1);
                        currentLocation[0] = Integer.parseInt(oldLocation.get(oldLocation.size() - 1).split(", ")[0].replace("[", ""));
                        currentLocation[1] = Integer.parseInt(oldLocation.get(oldLocation.size() - 1).split(", ")[1].replace("]", ""));
                    } else {
                        moveMaker(currentLocation, oldLocation, shortestPath, currentPath);
                    }
                }
                if (maze.getGrid()[current[0]][current[1] - 1] == 'P'
                        && !dejavu(current[0] + ", " + (current[1] - 1), oldLocation)) {
                    currentLocation[0] = current[0];
                    currentLocation[1] = current[1] - 1;
                    currentPath.add(Arrays.toString(currentLocation));
                    oldLocation.add(Arrays.toString(currentLocation));
                    if (currentLocation == maze.getEnd() && (shortestPath.length > currentPath.size() || shortestPath.length == 0)) {
                        shortestPath = currentPath.toArray(new String[currentPath.size()]);
                        currentPath.remove(currentPath.size() - 1);
                        oldLocation.remove(oldLocation.size() - 1);
                    } else if (shortestPath.length < currentPath.size() && shortestPath.length != 0) {
                        oldLocation.remove(oldLocation.size() - 1);
                        currentLocation[0] = Integer.parseInt(oldLocation.get(oldLocation.size() - 1).split(", ")[0].replace("[", ""));
                        currentLocation[1] = Integer.parseInt(oldLocation.get(oldLocation.size() - 1).split(", ")[1].replace("]", ""));
                    } else {
                        moveMaker(currentLocation, oldLocation, shortestPath, currentPath);
                    }
                }
                oldLocation.remove(oldLocation.size() - 1);
                currentLocation[0] = Integer.parseInt(oldLocation.get(oldLocation.size() - 1).split(", ")[0].replace("[", ""));
                currentLocation[1] = Integer.parseInt(oldLocation.get(oldLocation.size() - 1).split(", ")[1].replace("]", ""));
                if (currentLocation == maze.getStart()) {
                    throw new Exception();
                }
                currentPath.remove(currentPath.size() - 1);
                moveMaker(currentLocation, oldLocation, shortestPath, currentPath);

            }
        } catch (Exception e) {
            return shortestPath;
        }
    }

    public boolean dejavu(String nextLocation, ArrayList<String> oldlocation) {
        for (int i = 0; i < oldlocation.size(); i++) {
            if (oldlocation.get(i).contains(nextLocation)) {
                return true;
            }
        }
        return false;
    }

    public void writeSolution(String filename) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filename))) {
            bw.write(maze.pathString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
